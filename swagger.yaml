swagger: '2.0'
info:
  description: Rest APIDocumentation for class IFA01 2022
  version: 1.0.0
  title: RestAPI
  contact:
    email: jonas@shopjektiv.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost
basePath: /v2
paths:
  /list/{list_id}:
    get:
      tags:
        - list
      summary: Get a list from list_id
      operationId: add
      produces:
      - application/json
      parameters:
      - name: list_id
        in: path
        description: ID of list to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/List'
        404:
          description: List not found
    delete:
      tags:
        - list
      summary: Deletes an existing list
      operationId: delete
      produces:
      - application/json
      parameters:
      - name: list_id
        in: path
        description: ID of list to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success
        404:
          description: List not found
  /list:
    post:
      tags:
      - list
      summary: Adds new todo-list
      description: Fügt eine neue Todo-Liste hinzu
      operationId: addTodoList
      produces:
      - application/json
      parameters:
        - in: body
          name: body
          description: List
          required: true
          schema :
            $ref: '#/definitions/List'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/List'
        500:
          description: Internal Server Error
  /list/{list_id}/entry:
    post:
      tags:
      - entry
      summary: Add entry to list
      description: Fügt einen Eintrag zu einer bestehenden Todo-Liste hinzu..
      operationId: addEntryByList
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: list_id
        in: path
        description: ID of list to return
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: List of entry
        required: true
        schema:
          $ref: '#/definitions/ListEntry'
      responses:
        200:
          description: successful operation
        500:
          description: can't find url
  /list/{list_id}/entry/{entry_id}:
    post:
      tags:
        - entry
      summary: update entry
      description: Aktualisiert einen bestehenden Eintrag.
      operationId: updateEntryByList
      produces:
      - application/json
      parameters:
      - name: list_id
        in: path
        description: ID of list to return
        required: true
        type: integer
        format: int64
      - name: entry_id
        in: path
        description: ID of entry to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ListEntry'
        500:
          description: can't find url

    delete:
      tags:
      - entry
      summary: delete entry
      description: Löscht einen bestehenden Eintrag.
      operationId: deleteEntryByList
      produces:
      - application/json
      parameters:
      - name: list_id
        in: path
        description: ID of list to return
        required: true
        type: integer
        format: int64
      - name: entry_id
        in: path
        description: ID of entry to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
        404:
          description: entry not found
  /users:
    get:
      tags:
      - user
      summary: get user list
      description: Liefert eine Liste aller Benutzer zurück.
      operationId: getUser
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        500:
          description: can't find users
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: Fügt einen neuen Benutzer hinzu.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
        - in: body
          name: body
          description: create user
          required: true
          schema :
            $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        500:
          description: can't find url
  /user/{user_id}:
    delete:
      tags:
      - user
      summary: deletes user
      description: Löscht einen Benutzer.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: user_id
        in: path
        description: ID of entry to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
        404:
          description: entry not found
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: User
  ListEntry:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
    xml:
      name: ListEntry
  List:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      entries:
        type: string
        xml:
          name: tag
        items:
          $ref: '#/definitions/ListEntry'
    xml:
      name: List
#  ApiResponse:
#    type: object
#    properties:
#      code:
#        type: integer
#        format: int32
#      type:
#        type: string
#      message:
#        type: string
# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.com
# basePath: /jona-s-hop/REST-Schnittstelle/1.0.0
schemes:
 - https
 - http